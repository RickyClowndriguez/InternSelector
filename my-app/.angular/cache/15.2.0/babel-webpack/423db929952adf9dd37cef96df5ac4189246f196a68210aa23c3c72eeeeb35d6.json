{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users';\n  }\n  getUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  getUsernames() {\n    return this.http.get(this.apiUrl).pipe(map(users => users.map(user => user.username)));\n  }\n  getUsersWithTeamAndStatus() {\n    return this.getUsers().pipe(map(users => users.map(user => {\n      return {\n        username: user.username,\n        team: user.team,\n        status: user.status\n      };\n    })));\n  }\n  addUser(username, team, status) {\n    return this.getUsernames().pipe(switchMap(usernames => {\n      if (usernames.includes(username)) {\n        return throwError('Username already taken');\n      } else {\n        const user = {\n          username,\n          team,\n          status\n        };\n        return this.http.post(this.apiUrl, user);\n      }\n    }));\n  }\n  removeUser(username) {\n    console.log(`Removing user: ${username}`);\n    const url = `${this.apiUrl}?username=${username}`;\n    return this.http.delete(url);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;;;AAM/C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,6BAA6B;EAEN;EAExCC,QAAQ;IACN,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC;EAC1C;EAEAC,YAAY;IACV,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC,CAACE,IAAI,CAC3CT,GAAG,CAACU,KAAK,IAAIA,KAAK,CAACV,GAAG,CAACW,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,CAAC,CAC/C;EACH;EAEAC,yBAAyB;IACvB,OAAO,IAAI,CAACR,QAAQ,EAAE,CAACI,IAAI,CACzBT,GAAG,CAACU,KAAK,IAAIA,KAAK,CAACV,GAAG,CAACW,IAAI,IAAG;MAC5B,OAAO;QACLC,QAAQ,EAAED,IAAI,CAACC,QAAQ;QACvBE,IAAI,EAAEH,IAAI,CAACG,IAAI;QACfC,MAAM,EAAEJ,IAAI,CAACI;OACd;IACH,CAAC,CAAC,CAAC,CACJ;EACH;EAEAC,OAAO,CAACJ,QAAgB,EAAEE,IAAY,EAAEC,MAAc;IACpD,OAAO,IAAI,CAACP,YAAY,EAAE,CAACC,IAAI,CAC7BR,SAAS,CAACgB,SAAS,IAAG;MACpB,IAAIA,SAAS,CAACC,QAAQ,CAACN,QAAQ,CAAC,EAAE;QAChC,OAAOb,UAAU,CAAC,wBAAwB,CAAC;OAC5C,MAAM;QACL,MAAMY,IAAI,GAAG;UAAEC,QAAQ;UAAEE,IAAI;UAAEC;QAAM,CAAE;QACvC,OAAO,IAAI,CAACX,IAAI,CAACe,IAAI,CAAM,IAAI,CAACZ,MAAM,EAAEI,IAAI,CAAC;;IAEjD,CAAC,CAAC,CACH;EACH;EAEAS,UAAU,CAACR,QAAgB;IACzBS,OAAO,CAACC,GAAG,CAAC,kBAAkBV,QAAQ,EAAE,CAAC;IACzC,MAAMW,GAAG,GAAG,GAAG,IAAI,CAAChB,MAAM,aAAaK,QAAQ,EAAE;IACjD,OAAO,IAAI,CAACR,IAAI,CAACoB,MAAM,CAAMD,GAAG,CAAC;EACnC;;AA5CWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["throwError","map","switchMap","UserService","constructor","http","getUsers","get","apiUrl","getUsernames","pipe","users","user","username","getUsersWithTeamAndStatus","team","status","addUser","usernames","includes","post","removeUser","console","log","url","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/knacko/lolchoice/my-app/src/app/user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = 'http://localhost:3000/users';\n\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getUsernames(): Observable<string[]> {\n    return this.http.get<any[]>(this.apiUrl).pipe(\n      map(users => users.map(user => user.username))\n    );\n  }\n\n  getUsersWithTeamAndStatus(): Observable<any[]> {\n    return this.getUsers().pipe(\n      map(users => users.map(user => {\n        return {\n          username: user.username,\n          team: user.team,\n          status: user.status\n        };\n      }))\n    );\n  }\n\n  addUser(username: string, team: string, status: string): Observable<any> {\n    return this.getUsernames().pipe(\n      switchMap(usernames => {\n        if (usernames.includes(username)) {\n          return throwError('Username already taken');\n        } else {\n          const user = { username, team, status };\n          return this.http.post<any>(this.apiUrl, user);\n        }\n      })\n    );\n  }\n\n  removeUser(username: string): Observable<any> {\n    console.log(`Removing user: ${username}`);\n    const url = `${this.apiUrl}?username=${username}`;\n    return this.http.delete<any>(url);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}